interface GenericIntf<T, Z extends Node>
{
	[idx:number]: Z;
}

interface Test
{
	method<K extends Node, T extends Node>(a : K, b: T) : void;
	method2(b : GenericIntf<number, number>) : void;
	promiseVoid () : Promise<void>; 
}

declare var GenericIntf : {
	new<T, Z>() : GenericIntf<T, Z>;
	<T,Z>() : GenericIntf<T, Z>;
	a : GenericIntf<number, Node>;
	make() : GenericIntf<string, Node>;
	makeArr() : GenericIntf<string, Node>[];
	create<U>() : U;
};

declare namespace b
{
	interface Test2<T = any> {
	}
}